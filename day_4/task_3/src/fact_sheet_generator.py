"""
Fact Sheet Generator - Creates structured markdown fact sheets
Compiles questions and answers into educational astronomy fact sheets.
"""

from typing import List, Tuple
from datetime import datetime

class FactSheetGenerator:
    """
    Generates structured markdown fact sheets from Q&A pairs.
    """
    
    def __init__(self):
        """Initialize the fact sheet generator."""
        pass
    
    def generate_fact_sheet(self, topic: str, qa_pairs: List[Tuple[str, str]]) -> str:
        """
        Generate a comprehensive fact sheet from topic and Q&A pairs.
        
        Args:
            topic (str): Astronomy topic
            qa_pairs (List[Tuple[str, str]]): List of (question, answer) pairs
            
        Returns:
            str: Markdown formatted fact sheet
        """
        # Create the fact sheet structure
        fact_sheet = self._create_header(topic)
        fact_sheet += self._create_overview(topic)
        fact_sheet += self._create_qa_section(qa_pairs)
        fact_sheet += self._create_footer()
        
        return fact_sheet
    
    def _create_header(self, topic: str) -> str:
        """
        Create the header section of the fact sheet.
        
        Args:
            topic (str): Astronomy topic
            
        Returns:
            str: Header markdown
        """
        current_date = datetime.now().strftime("%B %d, %Y")
        
        header = f"""# 🌌 Astronomy Fact Sheet: {topic.title()} 🌌

**Generated on:** {current_date}  
**Topic:** {topic.title()}  
**Total Questions Explored:** {len(qa_pairs) if 'qa_pairs' in locals() else 'N/A'}

---

"""
        return header
    
    def _create_overview(self, topic: str) -> str:
        """
        Create the overview section.
        
        Args:
            topic (str): Astronomy topic
            
        Returns:
            str: Overview markdown
        """
        overview = f"""## 📋 Overview

This fact sheet explores the fascinating world of **{topic.title()}** in astronomy. Through careful research and investigation, we've compiled answers to key questions about this celestial phenomenon.

**What you'll learn:**
- Basic definitions and characteristics
- Historical discoveries and significance  
- Current research and recent findings
- Scientific importance and impact
- Interesting facts and phenomena
- Future implications and research directions

---

"""
        return overview
    
    def _create_qa_section(self, qa_pairs: List[Tuple[str, str]]) -> str:
        """
        Create the Q&A section.
        
        Args:
            qa_pairs (List[Tuple[str, str]]): List of (question, answer) pairs
            
        Returns:
            str: Q&A section markdown
        """
        qa_section = "## 🔍 Questions & Answers\n\n"
        
        for i, (question, answer) in enumerate(qa_pairs, 1):
            qa_section += f"### Question {i}\n\n"
            qa_section += f"**Q:** {question}\n\n"
            qa_section += f"**A:** {answer}\n\n"
            qa_section += "---\n\n"
        
        return qa_section
    
    def _create_footer(self) -> str:
        """
        Create the footer section.
        
        Returns:
            str: Footer markdown
        """
        footer = """## 📚 Sources & Methodology

This fact sheet was generated using:
- **ReAct Pattern**: Reasoning (LLM question generation) + Acting (web scraping)
- **Gemini LLM**: Google's advanced language model for question generation
- **Free Astronomy Resources**: Wikipedia, NASA, Space.com, and other authoritative sources
- **Web Scraping**: Automated retrieval of accurate, up-to-date information

### 🔬 Research Process

1. **Question Generation**: LLM generates relevant, investigative questions
2. **Information Retrieval**: Web scraping from multiple astronomy sources
3. **Content Compilation**: Structured compilation into educational fact sheets
4. **Quality Assurance**: Focus on accuracy and educational value

### 🌟 Educational Value

This fact sheet is designed to:
- Educate about celestial phenomena
- Provide accurate, up-to-date information
- Inspire curiosity about astronomy
- Support learning and research

---

*Generated by Astronomy Fact Finder - An AI-powered educational tool for exploring the cosmos.*
"""
        return footer
    
    def generate_summary_fact_sheet(self, topic: str, qa_pairs: List[Tuple[str, str]]) -> str:
        """
        Generate a condensed summary fact sheet.
        
        Args:
            topic (str): Astronomy topic
            qa_pairs (List[Tuple[str, str]]): List of (question, answer) pairs
            
        Returns:
            str: Summary fact sheet markdown
        """
        summary = f"""# 🌌 {topic.title()} - Quick Facts 🌌

**Generated:** {datetime.now().strftime("%B %d, %Y")}

## Key Questions & Answers

"""
        
        for i, (question, answer) in enumerate(qa_pairs, 1):
            # Truncate answer for summary
            short_answer = answer[:200] + "..." if len(answer) > 200 else answer
            summary += f"**{i}. {question}**\n{short_answer}\n\n"
        
        summary += f"""
## 📊 Summary

- **Topic Explored:** {topic.title()}
- **Questions Answered:** {len(qa_pairs)}
- **Information Sources:** Multiple astronomy websites and databases
- **Generation Method:** AI-powered ReAct pattern with web scraping

*For detailed answers, see the full fact sheet.*
"""
        
        return summary
    
    def format_answer(self, answer: str, max_length: int = 500) -> str:
        """
        Format and clean up an answer for better readability.
        
        Args:
            answer (str): Raw answer text
            max_length (int): Maximum length for the answer
            
        Returns:
            str: Formatted answer
        """
        # Clean up the answer
        cleaned = answer.strip()
        
        # Remove excessive whitespace
        cleaned = ' '.join(cleaned.split())
        
        # Truncate if too long
        if len(cleaned) > max_length:
            cleaned = cleaned[:max_length] + "..."
        
        # Add paragraph breaks for better readability
        sentences = cleaned.split('. ')
        if len(sentences) > 3:
            # Add line breaks every 2-3 sentences
            formatted_sentences = []
            for i, sentence in enumerate(sentences):
                formatted_sentences.append(sentence)
                if (i + 1) % 3 == 0 and i < len(sentences) - 1:
                    formatted_sentences.append("\n\n")
            
            cleaned = '. '.join(formatted_sentences)
        
        return cleaned 